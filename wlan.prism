mdp

const int ASLOTTIME = 1;
const int SIFS = 1;
const int DIFS = 3;
const int TRANS_TIME_MAX = 10;
const int TRANS_TIME_MIN = 4;
const int ACK = 5;
const double PACKET_LOSS_RATE = 0.5;
const double CCA = 0.2;

//FORMULA FOR THE CHANNEL
//channel is busy
formula free = status = 1;
//channel is free
formula busy = status = 0;

module channel

	// status coppesponds to the channel status
	// 0 status is busy
	// 1 status is free
	// initialized to be free
	status : [0..1] init 1;
	
	// begin sending message and nothing else currently being sent, status changes from FREE -> BUSY
	[send1] status = 1 -> (status' = 0);
	[send2] status = 1 -> (status' = 0);
	
	// finish sending message, status changes from BUSY -> FREE
	[finish1] status = 0 -> (status' = 1);
	[finish2] status = 0 -> (status' = 1);

	[] status = 1 -> CCA: (status' = 1) + 1-CCA: (status' = 0);

endmodule

module station1

	//clock for station1
	x1 : [0..TRANS_TIME_MAX];
	
	// local state
	s1 : [1..6]; 
	// 1 sense
	// 2 transmit
	// 3 wait for channel to be free
	// 4 FIAL
	// 5 DONE
	// 6 wait for DIFS and then transmit

	// SENSE, let time pass
	[time] s1 = 1 & x1 < DIFS & free -> (x1' = min(x1+1,TRANS_TIME_MAX));
	// ready to transmit
	[] s1 = 1 & x1 = DIFS -> (s1' =  2) & (x1' = 0);
	// found channel busy, so wait until free
	[] s1 = 1 & busy -> (s1' = 3) & (x1' = 0);

	// TRANSMIT, let time pass
	[time] s1 = 2 & x1 < TRANS_TIME_MAX -> (x1' = min(x1+1,TRANS_TIME_MAX));
	//move to transmit, with probability 1-p, the packet is sent successful; and with probability p, the packet is lost.
	[send1] s1 = 2 & x1>= TRANS_TIME_MIN -> 1-PACKET_LOSS_RATE: (s1' = 5) & (x1' = 0) + PACKET_LOSS_RATE: (s1' = 4) & (x1' = 0);
	
	//WAIT UNTIL FREE, let time pass
	[time] s1 = 3 & busy -> (s1' = 3);
	[] s1 = 3 & free -> (s1' = 6);
	
	//FIAL
	[time] s1 = 4 -> (s1' = 4);

	//DONE
	[time] s1 = 5 -> (s1' = 5);

	//WAIT FOR DIFS to transmit, let time pass
	[time] s1 = 6 & x1< DIFS & free -> (x1' = min(x1+1,TRANS_TIME_MAX));
	[] s1 =6 & x1 = DIFS -> (s1' = 2) & (x1' = 0);

endmodule

// station 2 (rename station 1)
module 
station2 = station1[
			x1 = x2,
			s1 = s2,
			s2 = s1,
			send1 = send2,
			finish1 = finish2]

endmodule

//reward structure for expected time, one time unit equals ASLOTTIME(=20 microseconds)
rewards "time"
	[time] true : 20;
endrewards
